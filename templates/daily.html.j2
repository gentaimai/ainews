<!doctype html>
<html lang="ja">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{ date }} のAIニュースまとめ - ainews.komee.org</title>
  <meta name="description" content="生成AI・ChatGPT関連ニュースを自動収集・要約。{{ date }} のトピック一覧。">
  <style>
    body{font-family:system-ui, -apple-system, Segoe UI, Roboto; margin:0;background:#0b0f14;color:#e6edf3;}
    header{background:#121821;padding:16px;font-size:20px;font-weight:bold;border-bottom:1px solid #111722;}
    a{color:#4cc2ff;text-decoration:none}
    main{max-width:900px;margin:auto;padding:16px;}
    article{background:#121821;margin:12px 0;padding:12px;border-radius:12px;border:1px solid #111722}
    .src{color:#8b98a5;font-size:13px}
    footer{color:#8b98a5;text-align:center;padding:20px;font-size:13px;border-top:1px solid #111722}
    .news { padding:8px 0; }
    .news .news-summary{
      margin-top:4px; font-size:12px; color:#8b98a5; line-height:1.5;
    }
    .news .news-summary.loading{ opacity:.7; }
  </style>
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6238004847920381" crossorigin="anonymous"></script>
</head>
<body>
<header><a href="../index.html">📰 生成AIニュースまとめ</a></header>
<main>
  <h2>{{ date }} のニュース一覧</h2>
  {% for i in items %}
<article class="news">
  <a class="news-link" href="{{ i.link }}" target="_blank" rel="noopener"><b>{{ i.title }}</b></a>
  <div class="src">{{ i.source }} — {{ i.date }}</div>
  <p>{{ i.summary }}</p>

  <!-- Worker から取得した 1行要約を差し込む領域（初期はローディング表示） -->
  <div class="news-summary loading">要約を取得中…</div>
</article>
{% endfor %}

</main>
<footer>© {{ date[:4] }} komee.org — 自動生成ニュース</footer>
<script>
  const SUM_API = 'https://news-summary.ainews-worker.workers.dev/summarize';

  // .news 内から「要約対象URL」を見つける（.news-link が無ければ先頭の外部リンクを使用）
  function pickArticleUrl(container) {
    // 1) .news-link を優先
    const preferred = container.querySelector('a.news-link[href^="http"]');
    if (preferred?.href) return preferred.href;

    // 2) 最初の外部リンク（http/https）を使用
    const any = container.querySelector('a[href^="http"]');
    if (any?.href) return any.href;

    // 3) data-link 属性にURLが入っているケースにも対応（任意）
    const data = container.getAttribute('data-link');
    if (data && /^https?:\/\//.test(data)) return data;

    return null;
  }

  async function attachSummaries(root = document) {
    const articles = Array.from(root.querySelectorAll('article.news'));

    for (const el of articles) {
      // プレースホルダ（既にテンプレに入っている想定。無ければ作る）
      let holder = el.querySelector('.news-summary');
      if (!holder) {
        holder = document.createElement('div');
        holder.className = 'news-summary loading';
        holder.textContent = '要約を取得中…';
        el.appendChild(holder);
      }

      // 既に処理済みならスキップ
      if (holder.dataset.done === '1') continue;

      const targetUrl = pickArticleUrl(el);
      if (!targetUrl) {
        holder.textContent = '（リンクが見つかりません）';
        holder.classList.remove('loading');
        holder.dataset.done = '1';
        console.warn('[summary] link not found in', el);
        continue;
      }

      try {
        // 一応ログ（DevTools Console で原因追跡用）
        console.debug('[summary] fetching:', targetUrl);

        const ctrl = new AbortController();
        const timeout = setTimeout(() => ctrl.abort('timeout'), 15000); // 15s タイムアウト
        const res = await fetch(`${SUM_API}?url=${encodeURIComponent(targetUrl)}`, { signal: ctrl.signal });
        clearTimeout(timeout);

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}`);
        }
        const j = await res.json().catch(() => ({}));
        const text = (j.summary || '').trim();

        holder.textContent = text || '（要約なし）';
      } catch (e) {
        holder.textContent = '（要約の取得に失敗しました）';
        console.error('[summary] fetch failed:', e);
      } finally {
        holder.classList.remove('loading');
        holder.dataset.done = '1';
      }
    }
  }

  // ページ読込完了で実行
  window.addEventListener('load', () => {
    attachSummaries();

    // 後から記事が追加されるケースに対応（必要なければ削除OK）
    const obs = new MutationObserver(muts => {
      for (const m of muts) {
        for (const node of m.addedNodes) {
          if (node?.nodeType !== 1) continue;
          if (node.matches?.('article.news') || node.querySelector?.('article.news')) {
            attachSummaries(node);
          }
        }
      }
    });
    obs.observe(document.body, { childList: true, subtree: true });
  });
</script>

</body>
</html>
